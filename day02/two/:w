import Data.Maybe

data Heading = North | South | East | West deriving (Show)
data Coordinate = Coordinate Int Int deriving (Show, Eq)

input = ["LLLUDRDLLULDUDLLRLUDURULDURRRRLLURLDLDDDULLDDUDLRDLRDUURRDUUDLLRUUDDLULURDLRDUUDUDRURULLLLDRULDDLRDDRDLRDDLURLDDUDLLUUDLRDDDDLULUUURRDLUUDDLULLURRRDULLUDUDRDRDDRLDLLRLRDDDRDLULLUULDLLLRRDDUURUURDLLDRRDDLRULDLLDRLLUDRRDLUUULDLURLLDDURRUULLLLLRLUDLDDLLLURRRDUDULRULULDDLLDLRDDDUULRLRDUURLURRUDDURRUUDUDLDDLDULDDDDDULRULRDLRLDLRDLDDLUDRDUUDLDUDUDLLLRLUUDRUDDDRDRURRLLLDLUULDUULRDLULLUURLDRRRLDRLUDRRURLDULULDRUDDULLLDRDLLULUDDDDRDRULDULRRRRDDRULDLRDU"] ++
        ["DLDDRRDLLDUURRLULLLLRDRLUDURLDRRDURRRRUUDDUDRRDDDRRLDDLDDLURDLDRLUDULDUDUUDDDLLULRRLLUDULLLUULDDRDDUDUUDULURULULLDRLRUURDRDDLRRUDRUULLLLURRUDRDULDDRURRURLLLLLRLLLRLLUDUDLRDLULDUDLULLLUUDLLDDDUDUDLLRRDLRDLLLRRLRUDRDUDRURLUUURULLDDDDLLURDULURRLLLRLRRULLRRRLUUULLLLRLRDUURRDUURLLLDRDURRRULDDUDRRDLRLDLLRUDDLLUDRLLUUDRLLLLLLUDLURLLRUDRUUUULDLUDULLDDDDRLURUURDDDURRRLRLUDUUDURDDDDRRLRDLURDDLLULDRDDURLLURULUUUUURDUUULDRRLLURRRRRLDDUULLRULLDLDLDLRRRDRLDRUUD"] ++
        ["RLDRRRURULDLUDLDUDLLDUUURRDUDDURULLRRDDULUUDRRRULRUURRRLUUULRDRUDRRLLRLURDLDRDRDLLUDRUULRUDRUDDRURLRLURRDDRRURUUDRRDDRURURUDUUUDUDRRLRDRUUURLLUUUDLRUUDDRDDDDLDRLRDUDDULDDLRLLRURLLURLDDLDLDDULLDDUUURDLRUDUUDLDURDDRUULDRDDRDDDUUUDRDRDDRRDRRDLRDRURDUDDLUUUDULLUULULULRDRUUDDURURDRRRRLUDLDUDURLDRURDLLUUUDLRRDRRURDDULULURLDUDDLUDLDDLLRLDULLULULURUURLDULUDLLUUDLDDULDRRDDUULLUDLDLLRDRDURDDURDDURLDDURUURLLRURURUDDURRDRLRLDDUUDUULRDLLURRRRULURULDUDUDDUDDRLLLDLURDUURUURLUULRRLDLULDDRLDDUURULURUDRD"] ++
        ["URLDDRLLRRLDRLLRRURURURDDLRRRUUUURULRRUUDLUDRULLDLRUDDLULRUULDULURLLRLLUDDUDLURDRRRRLURULRURRURRULRRRULDLLDDLRLUDULUUUDDUDDRRDDDDUULRRLDRRULULRDUURRLDDRDULDURUDUDDLDLLURDDLDDRUDUUUDUUURDLDUDUUULLDLRDULRRRDLLURLDLLULRDDULULURLRLUULRLLLDDDUDLLDLURRRULRDUDDLULUDRUDDURULRLRUDDURLLURULLURDRULDUDLDULRRDLDURLUURRDDUDDUDRURUDDURRUUDURUULLLLDDRDDDDDULUUDDURRULLDRRLRRRRRDDRUUDDDURDRDRUDDUULDUDRRDRULUURLURLUDUDULDDRDULDLRUUDLLLRRLRDRDDUUULRDUDLUDLURRDUURDULDRLLDRDULDUDUULRLLDLRLDLUUDLRUULDUUULDLRLRLUULLLLRLRDUDRUUDURLDUDRRURLRUDRRLRDDLRDDLDDUDDDRLRLLRLUUURLURRRLULRLLDRLRDDRRDRL"] ++
        ["DLLLLLLRLRDRUDLRLLRLDLRURRUURLDLDDDDDUDUULLLLRRLRRDUUDUDLULLRRDULUDLLULURLRULURUULRLURDUDLUDULULUUURLRUDULURULRURULURLRLDRRRRLUDLLDULLDDLLULUURRULRDURDUUDDDURRUDLLLLRLDLUDDULLDUDDURURURRRRULDULULUDDUUDRLRLLLDLLLUUUURUDUUDLDLLRLRDDUULLUURLDDLRRDRLULDLULRULDLDURLULUURRRUDLLRDLUDDULRULULUDDURDLUUURDUUURDUDURLUUDRLUDRULUDDRRDLUUDLLLRDDDDDDLDURDDLDRDLUUDRULLUDRDLDULLULDDRUUDRRLRURRUULLRLRDUUURRDRRDULDDULUUDDURLULRLRURLLRRR"]

x :: Maybe a
x = Nothing

n :: String -> Maybe String
n digit = Just digit

numpad :: [[Maybe String]]
numpad = [[x    , x    , x    , x    , x    , x    , x    ],
          [x    , x    , x    , n "1", x    , x    , x    ],
          [x    , x    , n "2", n "3", n "4", x    , x    ],
          [x    , n "5", n "6", n "7", n "8", n "9", x    ],
          [x    , x    , n "A", n "B", n "C", x    , x    ],
          [x    , x    , x    , n "D", x    , x    , x    ],
          [x    , x    , x    , x    , x    , x    , x    ]]

lowerBound = 0
upperBound = 2

isInBound :: Coordinate -> Bool
isInBound (Coordinate x y) =
  isJust (input !! x !! y)

rawMove :: Heading -> Coordinate -> Coordinate
rawMove North (Coordinate x y) = Coordinate (x - 1) y
rawMove South (Coordinate x y) = Coordinate (x + 1) y
rawMove East (Coordinate x y) = Coordinate x (y + 1)
rawMove West (Coordinate x y) = Coordinate x (y - 1)

move :: Heading -> Coordinate -> Coordinate
move heading location =
  let newLocation = rawMove heading location
  in if isInBound newLocation then newLocation
     else oldLocation

initial = Coordinate 3 1

directionForLetter :: Char -> Heading
directionForLetter 'U' = North
directionForLetter 'D' = South
directionForLetter 'L' = West
directionForLetter 'R' = East

nextPosition :: Coordinate -> Char -> Coordinate
nextPosition coord char = move heading coord
  where heading = directionForLetter char

digit :: Coordinate -> [Char] -> Coordinate
digit coord chars = foldl nextPosition coord chars

digits :: Coordinate -> [[Char]] -> [Coordinate]
digits coord strings = tail $ scanl digit coord strings

toDigit :: Coordinate -> String
toDigit (Coordinate x y) = show $ numpad !! x !! y

code :: [Coordinate] -> String
code coords = foldr (++) "" $ map toDigit coords

main = do putStrLn "Digits:"
          print $ code $ digits initial input
